from pathlib import Path
import pandas as pd
from plotnine import *
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import seaborn as sns

path = str(Path(__file__).resolve().parents[1])

df = pd.read_csv(path+"/output/base.csv", index_col=0)

df = df.filter([
'abstencao_1t_pct',
# 'abstencao_1t_qt',
'abstencao_2t_pct',
# 'abstencao_2t_qt',
#'ano',
'area',
'automovel',
#'bonde',
#'caminhao',
#'caminhao trator',
#'caminhonete',
#'camioneta',
'capital',
#'chassi plataf',
#'ciclomotor',
#'expectativa_anos_estudo',
# 'expectativa_vida',
#'fecundidade_total',
# 'ideb',
'idhm', #idh municipal
# 'idhm_e', #idh educação
# 'idhm_l', #idh longevidade
# 'idhm_r', #idh rendaa
#'indice_escolaridade',
#'indice_frequencia_escolar',
'indice_gini',
# 'indice_theil',
#'indice_treil_trabalho',
'micro-onibus',
#'mortalidade_1',
#'mortalidade_5',
'motocicleta',
'motoneta',
'onibus',
#'outros',
'passe_livre',
'passe_livre_1t',
'passe_livre_2t',
'passe_livre_inicio',
# 'pea',
# 'pea_10_14',
# 'pea_15_17',
# 'pea_18_mais',
# 'pia',
# 'pia_10_14',
# 'pia_15_17',
# 'pia_18_mais',
# 'pib',
'populacao',
'populacao_dom_pp',
# 'populacao_dom_pp_exc_renda_nula',
'populacao_rural',
'populacao_urbana',
'precipitacao_hr_1t',
'precipitacao_hr_2t',
'precipitacao_mm_1t',
'precipitacao_mm_2t',
# 'prob_sobrevivencia_40',
# 'prob_sobrevivencia_60',
'prop_empregadores',
# 'prop_ocupados_agropecuaria',
# 'prop_ocupados_comercio',
# 'prop_ocupados_construcao',
# 'prop_ocupados_extracao',
# 'prop_ocupados_formalizacao',
# 'prop_ocupados_fundamental',
# 'prop_ocupados_medio',
# 'prop_ocupados_renda_0',
# 'prop_ocupados_renda_1_sm',
# 'prop_ocupados_renda_2_sm',
# 'prop_ocupados_renda_3_sm',
# 'prop_ocupados_renda_5_sm',
# 'prop_ocupados_servicos',
# 'prop_ocupados_siup', #serviços industriais de utilidade pública
# 'prop_ocupados_superior',
# 'prop_ocupados_transformacao',
'prop_pobreza',
# 'prop_pobreza_criancas',
'prop_pobreza_extrema',
# 'prop_pobreza_extrema_criancas',
# 'prop_renda_10_ricos',
# 'prop_renda_20_pobres',
# 'prop_renda_20_ricos',
# 'prop_renda_40_pobres',
# 'prop_renda_60_pobres',
# 'prop_renda_80_pobres',
# 'prop_renda_trabalho',
'prop_trabalhadores_conta_proria',
# 'prop_vulner_pobreza',
# 'prop_vulner_pobreza_criancas',
'qt_eleitor_apto',
# 'quadriciclo',
# 'razao_10_ricos_40_pobres',
# 'razao_20_ricos_40_pobres',
'razao_dependencia',
# 'reboque',
# 'renda_media_ocupados',
'renda_pc',
# 'renda_pc_decil_10',
'renda_pc_exc_renda_nula',
# 'renda_pc_max_decil_9',
# 'renda_pc_max_quintil_1',
# 'renda_pc_max_quintil_2',
# 'renda_pc_max_quintil_3',
# 'renda_pc_max_quintil_4',
# 'renda_pc_pobreza',
# 'renda_pc_pobreza_extrema',
# 'renda_pc_quintil_1',
# 'renda_pc_quintil_2',
# 'renda_pc_quintil_3',
# 'renda_pc_quintil_4',
# 'renda_pc_quintil_5',
# 'renda_pc_vulner_pobreza',
# 'semi-reboque',
# 'side-car',
'taxa_agua_encanada',
# 'taxa_agua_esgoto_inadequados',
# 'taxa_analfabetismo_11_a_14',
# 'taxa_analfabetismo_15_a_17',
# 'taxa_analfabetismo_15_mais',
# 'taxa_analfabetismo_18_a_24',
# 'taxa_analfabetismo_18_mais',
# 'taxa_analfabetismo_25_a_29',
# 'taxa_analfabetismo_25_mais',
# 'taxa_atividade',
# 'taxa_atividade_10_14',
# 'taxa_atividade_15_17',
# 'taxa_atividade_18_24',
# 'taxa_atividade_18_mais',
# 'taxa_atividade_25_29',
# 'taxa_atraso_0_basico',
# 'taxa_atraso_0_fundamental',
# 'taxa_atraso_0_medio',
# 'taxa_atraso_1_basico',
# 'taxa_atraso_1_fundamental',
# 'taxa_atraso_1_medio',
# 'taxa_atraso_2_basico',
# 'taxa_atraso_2_fundamental',
# 'taxa_atraso_2_medio',
# 'taxa_banheiro_agua_encanada',
'taxa_coleta_lixo',
# 'taxa_criancas_dom_sem_fund',
# 'taxa_criancas_fora_escola_4_5',
# 'taxa_criancas_fora_escola_6_14',
'taxa_densidade_2_mais',
'taxa_desocupacao',
# 'taxa_desocupacao_10_14',
# 'taxa_desocupacao_15_17',
# 'taxa_desocupacao_18_24',
# 'taxa_desocupacao_18_mais',
# 'taxa_desocupacao_25_29',
# 'taxa_dom_sem_fund',
# 'taxa_dom_vulner_dep_idoso',
# 'taxa_dom_vulner_sem_fund',
'taxa_energia_eletrica',
'taxa_envelhecimento',
# 'taxa_freq_0_3',
# 'taxa_freq_11_14',
# 'taxa_freq_15_17',
# 'taxa_freq_18_24',
# 'taxa_freq_25_29',
# 'taxa_freq_4_5',
# 'taxa_freq_4_6',
# 'taxa_freq_5_6',
# 'taxa_freq_6',
# 'taxa_freq_6_14',
# 'taxa_freq_6_17',
# 'taxa_freq_bruta_basico',
# 'taxa_freq_bruta_fundamental',
# 'taxa_freq_bruta_medio',
# 'taxa_freq_bruta_pre',
# 'taxa_freq_bruta_superior',
# 'taxa_freq_fundamental_15_17',
# 'taxa_freq_fundamental_18_24',
# 'taxa_freq_fundamental_4_5',
# 'taxa_freq_liquida_basico',
# 'taxa_freq_liquida_fundamental',
# 'taxa_freq_liquida_medio',
# 'taxa_freq_liquida_pre',
# 'taxa_freq_liquida_superior',
# 'taxa_freq_medio_18_24',
# 'taxa_freq_medio_6_14',
# 'taxa_freq_superior_15_17',
# 'taxa_fundamental_11_13',
# 'taxa_fundamental_12_14',
# 'taxa_fundamental_15_17',
# 'taxa_fundamental_16_18',
# 'taxa_fundamental_18_24',
# 'taxa_fundamental_18_mais',
# 'taxa_fundamental_25_mais',
# 'taxa_medio_18_20',
# 'taxa_medio_18_24',
# 'taxa_medio_18_mais',
# 'taxa_medio_19_21',
# 'taxa_medio_25_mais',
# 'taxa_mulheres_chefe_filho_15m',
# 'taxa_mulheres_com_filho_10_14',
# 'taxa_mulheres_com_filho_15_17',
# 'taxa_nest_ntrab_vulner_15_24',
# 'taxa_ocupados_carteira',
'taxa_ocupados_sem_carteira',
# 'taxa_ocupados_setor_publico',
# 'taxa_paredes_inadequados',
# 'taxa_sem_energia_eletrica',
# 'taxa_sem_fund_informal',
# 'taxa_superior_25_mais',
'taxa_vulner_desloc_1_hora',
'temp_1t',
'temp_2t',
'total',
# 'trator estei',
# 'trator rodas',
# 'triciclo',
'umidade_1t',
'umidade_2t',
# 'utilitario',
# 'va_adespss',
# 'va_agropecuaria',
# 'va_industria',
# 'va_servicos'
    ])

df = df.rename({"micro-onibus": "micro_onibus"}, axis = 1)

df = (df.assign(
    densidade_log = lambda _: np.log(_.qt_eleitor_apto /_.area),
    veiculos_pc = lambda _: _.total/_.qt_eleitor_apto,
    automovel_pc = lambda _: _.micro_onibus/_.qt_eleitor_apto,
    micro_onibus_pc = lambda _: _.automovel/_.qt_eleitor_apto,
    motocicleta_pc = lambda _: _.motocicleta/_.qt_eleitor_apto,
    motoneta_pc = lambda _: _.motoneta/_.qt_eleitor_apto,
    onibus_pc = lambda _: _.onibus/_.qt_eleitor_apto,
    populacao_dom_pp = lambda _: _.populacao_dom_pp/_.populacao,
    populacao_urbana_pc = lambda _: _.populacao_urbana / (_.populacao_urbana + _.populacao_rural))
    .drop(["area", "automovel", "micro_onibus", "motocicleta", "motoneta", "onibus", 
           "populacao_urbana", "populacao_rural", "qt_eleitor_apto", "populacao", "total"], axis = 1)
    )

# for variavel in df.columns:
#     try:
#         (ggplot(df)+geom_density(aes(variavel))).save(path+f"/output/descritiva/modelo_pct/{variavel}.png", dpi = 300)
#     except:
#         print("error: "+variavel)

#Matriz de covariância
fig, ax = plt.subplots(figsize=(20, 20))
sns.heatmap(df.corr(), #mask=np.triu(np.ones_like(df.corr(), dtype=bool)), 
            cmap=sns.diverging_palette(230, 20, as_cmap=True), vmax=1, vmin = -1, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5})

fig.savefig(path+f"/output/descritiva/corrplot_pct.svg", format='svg', dpi=1200)
matplotlib.rcParams.update({'font.size': 10})

df.to_csv(path+"/output/base_pct.csv")

